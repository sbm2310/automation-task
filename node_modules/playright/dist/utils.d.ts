export declare const sleep: (ms: number) => Promise<unknown>;
export declare namespace fp {
    const pipe: (...fns: any[]) => (x: any) => any;
    const toString: <O>(obj: O) => string;
    function named<F>(description: string, fn: F): F;
}
export declare namespace Url {
    const isAbsolute: (relativeOrAbsoluteUrl: string) => boolean;
}
export declare namespace predicate {
    const isTruthy: <V>(something: V) => boolean;
    const equalsIgnoringCase: <V>(expected: V) => (actual: V) => boolean;
    const equals: <V>(expected: V, ignoreCase?: boolean) => (actual: V) => boolean;
    const isGreaterThan: <V>(expected: V) => (actual: V) => boolean;
    const isGreaterThanOrEqual: <V>(expected: V) => (actual: V) => boolean;
    const isLessThan: <V>(expected: V) => (actual: V) => boolean;
    const isLessThanOrEqual: <V>(expected: V) => (actual: V) => boolean;
    const includesIgnoringCase: (expected: any) => (actual: any) => boolean;
    const includes: (expected: any, ignoreCase?: boolean) => (actual: any) => any;
    const matches: (expected: any) => (actual: any) => any;
    const includesWordIgnoringCase: (expected: string) => (actual: string) => boolean;
    const includesWord: (expected: string, ignoreCase?: boolean) => (actual: string) => boolean;
    const arrayCompareBy: (f: any) => ([x, ...xs]: any[]) => ([y, ...ys]: any[]) => any;
    const equalsToArray: ([x, ...xs]: any[]) => ([y, ...ys]: any[]) => any;
    const equalsByContainsToArray: ([x, ...xs]: any[]) => ([y, ...ys]: any[]) => any;
}
//# sourceMappingURL=utils.d.ts.map