import { Condition } from './callables';
import { Element } from './element';
import { Elements } from './elements';
export declare namespace match {
    const visible: Condition<Element>;
    const text: (expected: string | number | RegExp) => Condition<Element>;
    const exactText: (expected: string | number | RegExp) => Condition<Element>;
    const cssClass: (name: string) => Condition<Element>;
    const attribute: (name: string, value?: string | RegExp) => Condition<Element>;
    const element: (locator: string) => Condition<Element>;
    const texts: (...values: string[] | number[]) => Condition<Elements>;
    const count: (num: number) => Condition<Elements>;
}
export declare namespace have {
    const text: (expected: string | number | RegExp) => Condition<Element>;
    const exactText: (expected: string | number | RegExp) => Condition<Element>;
    const cssClass: (name: string) => Condition<Element>;
    const texts: (...values: string[] | number[]) => Condition<Elements>;
    const count: (num: number) => Condition<Elements>;
    const attribute: (name: string, value?: string | RegExp) => Condition<Element>;
    const element: (locator: string) => Condition<Element>;
    namespace no {
        const text: (expected: string | number | RegExp) => Condition<Element>;
        const cssClass: (name: string) => Condition<Element>;
        const texts: (...values: string[] | number[]) => Condition<Elements>;
        const count: (num: number) => Condition<Elements>;
        const attribute: (name: string, value?: string) => Condition<Element>;
    }
}
export declare namespace be {
    const visible: Condition<Element>;
    namespace not {
        const visible: Condition<Element>;
    }
}
//# sourceMappingURL=conditions.d.ts.map