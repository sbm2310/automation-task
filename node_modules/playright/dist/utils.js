"use strict";
// MIT License
//
// Copyright (c) 2020 Iakiv Kramarenko, Alexander Popov
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
Object.defineProperty(exports, "__esModule", { value: true });
exports.predicate = exports.Url = exports.fp = exports.sleep = void 0;
const sleep = (ms) => new Promise(res => setTimeout(res, ms));
exports.sleep = sleep;
var fp;
(function (fp) {
    fp.pipe = (...fns) => x => fns.reduce((y, f) => f(y), x);
    fp.toString = (obj) => obj.toString();
    function named(description, fn) {
        // eslint-disable-next-line no-param-reassign
        fn.toString = () => description;
        return fn;
    }
    fp.named = named;
})(fp = exports.fp || (exports.fp = {}));
var Url;
(function (Url) {
    Url.isAbsolute = (relativeOrAbsoluteUrl) => ['http:', 'https:', 'file:', 'about:', 'data:'].some(prefix => relativeOrAbsoluteUrl.toLowerCase().startsWith(prefix));
})(Url = exports.Url || (exports.Url = {}));
var predicate;
(function (predicate) {
    predicate.isTruthy = (something) => (`${something}` === '' ? true : !!something);
    predicate.equalsIgnoringCase = (expected) => (actual) => `${actual}`.toLowerCase() === `${expected}`.toLowerCase();
    predicate.equals = (expected, ignoreCase = false) => (actual) => (ignoreCase ? predicate.equalsIgnoringCase(expected)(actual) : actual === expected);
    predicate.isGreaterThan = (expected) => (actual) => actual > expected;
    predicate.isGreaterThanOrEqual = (expected) => (actual) => actual >= expected;
    predicate.isLessThan = (expected) => (actual) => actual < expected;
    predicate.isLessThanOrEqual = (expected) => (actual) => actual <= expected;
    predicate.includesIgnoringCase = (expected) => (actual) => `${actual}`.includes(`${expected}`);
    predicate.includes = (expected, ignoreCase = false) => (actual) => (ignoreCase ? predicate.includesIgnoringCase(expected)(actual) : actual.includes(expected));
    predicate.matches = (expected) => (actual) => actual.match(expected);
    predicate.includesWordIgnoringCase = (expected) => (actual) => actual
        .toLowerCase()
        .split(' ')
        .includes(expected.toLowerCase());
    predicate.includesWord = (expected, ignoreCase = false) => (actual) => (ignoreCase ? predicate.includesWordIgnoringCase(expected)(actual) : actual.split(' ').includes(expected));
    predicate.arrayCompareBy = f => ([x, ...xs]) => ([y, ...ys]) => (x === undefined && y === undefined ? true : Boolean(f(x)(y)) && predicate.arrayCompareBy(f)(xs)(ys));
    predicate.equalsToArray = predicate.arrayCompareBy(predicate.equals);
    predicate.equalsByContainsToArray = predicate.arrayCompareBy(predicate.includes);
})(predicate = exports.predicate || (exports.predicate = {}));
