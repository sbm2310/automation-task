import * as playwright from 'playwright';
import { Configuration } from './configuraton';
import { Wait } from './wait';
import { Condition, Locator } from './callables';
import { Element } from './element';
export declare class Elements {
    private readonly options;
    private readonly find;
    constructor(options: Configuration, find: Locator<playwright.ElementHandle<Node>[]>);
    handles(): Promise<playwright.ElementHandle<Node>[]>;
    get wait(): Wait<Elements>;
    cached(): Promise<Elements>;
    cachedArray(): Promise<Element[]>;
    $(index: number): Element;
    get first(): Element;
    $$(mapper: (element: Element) => Element | Elements): Elements;
    sliced(start: number, end?: number): Elements;
    firstBy(condition: Condition<Element>): Element;
    by(condition: Condition<Element>): Elements;
    should(condition: Condition<Elements>): Promise<Elements>;
    eachShould(condition: Condition<Element>): Promise<Elements>;
    toString(): string;
}
//# sourceMappingURL=elements.d.ts.map