import { Element } from './element';
import { Elements } from './elements';
import { Callable } from './callables';
/**
 * TODO: should we make the structure like query.element.text?
 * TODO: should we make it's possible to compose queries by the user
 *       something like
 *           query = {...query.element, ...query.browser, ...query.elements}
 */
export declare namespace query {
    /**
     * there are actually innerText and textContent
     * fully described here: https://stackoverflow.com/a/35213639/1297371
     * in short, the innerText = visible text
     *
     * TODO: how should we name the thing below? what about textContent too?
     */
    /**
     * TODO: refactor queries from callable objects to classic functions with
     *       overriden toString method like in selenidejs
     *       use named from ./utils/fp
     */
    const text: Callable<Element, string>;
    function attribute(name: string): Callable<Element, string>;
    const outerHtml: Callable<Element, string>;
    const count: Callable<Elements, number>;
    const length: Callable<Elements, number>;
    const texts: Callable<Elements, string[]>;
}
//# sourceMappingURL=queries.d.ts.map