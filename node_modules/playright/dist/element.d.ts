import * as driver from 'playwright';
import { Condition, Locator } from './callables';
import { Configuration } from './configuraton';
import { Elements } from './elements';
import { Wait } from './wait';
/**
 * TODO: consider putting into Playright namespace
 */
export declare class Element {
    readonly options: Configuration;
    private readonly find;
    constructor(options: Configuration, find: Locator<driver.ElementHandle<Node>>);
    handle(): Promise<driver.ElementHandle<Node>>;
    $(selector: string): Element;
    $$(selector: string): Elements;
    get parent(): Element;
    get wait(): Wait<Element>;
    should(condition: Condition<Element>): Promise<Element>;
    /**
     *
     * @param text
     * @param options should be like ElementHandleTypeOptions from playwright
     * but without timeout becuase we have our own waiting logic and timeout
     *
     * TODO: but should we actually have it?
     * TODO: shouldn't we reuse playwright's waiting logic where possible?
     */
    type(text: string, options?: {
        delay?: number;
        noWaitAfter?: boolean;
        timeout?: number;
    }): Promise<Element>;
    /**
     *
     * @param value
     * @param options should be like ElementHandleFillOptions from playwright
     * but without timeout becuase we have our own waiting logic and timeout
     */
    fill(value: string, options?: {
        timeout?: number;
        noWaitAfter?: boolean;
    }): Promise<Element>;
    setValue(value: string, options?: {
        timeout?: number;
        noWaitAfter?: boolean;
    }): Promise<Element>;
    /**
     *
     * @param key Name of the key to press or a character to generate,
     * such as `ArrowLeft` or `a`.
     * @param options should be like ElementHandlePressOptions from playwright
     * but without timeout becuase we have our own waiting logic and timeout
     */
    press(key: string, options?: {
        timeout?: number;
        delay?: number;
        noWaitAfter?: boolean;
    }): Promise<Element>;
    click(options?: {
        button?: 'left' | 'right' | 'middle';
        clickCount?: number;
        delay?: number;
        position?: {
            x: number;
            y: number;
        };
        modifiers?: Array<'Alt' | 'Control' | 'Meta' | 'Shift'>;
        force?: boolean;
        noWaitAfter?: boolean;
    }): Promise<Element>;
    /**
     * TODO: shouldn't we call (await this.handle).dblClick() ?
     */
    doubleClick(options?: {
        button?: 'left' | 'right' | 'middle';
        clickCount?: number;
        delay?: number;
        position?: {
            x: number;
            y: number;
        };
        modifiers?: Array<'Alt' | 'Control' | 'Meta' | 'Shift'>;
        force?: boolean;
        noWaitAfter?: boolean;
    }): Promise<Element>;
    contextClick(): Promise<Element>;
    hover({ position, modifiers, // Array<"Alt"|"Control"|"Meta"|"Shift">,
    force, }?: {
        position?: any;
        modifiers?: any;
        force?: boolean;
    }): Promise<Element>;
    text(): Promise<string>;
    toString(): string;
}
//# sourceMappingURL=element.d.ts.map