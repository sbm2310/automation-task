"use strict";
// MIT License
//
// Copyright (c) 2020 Iakiv Kramarenko, Alexander Popov
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
Object.defineProperty(exports, "__esModule", { value: true });
exports.Condition = void 0;
const errors_1 = require("./errors");
/**
 * Like Command<T>, that can pass or fail with Error,
 * Named as Condition to reflect scenarios of "predicate-like" usage
 * Condition is like classic Matcher,
 * like Predicate but gives (passed | throws Error) instead of (true | false)
 * or in other words (matched | failed)
 */
class Condition {
    constructor(description, fn) {
        this.description = description;
        this.fn = fn;
        this.description = description;
        this.fn = fn;
    }
    async call(entity) {
        await this.fn(entity);
    }
    get not() {
        return Condition.not(this);
    }
    and(condition) {
        return Condition.and(this, condition);
    }
    or(condition) {
        return Condition.or(this, condition);
    }
    matches(entity) {
        return this.call(entity).then(() => true, () => false);
    }
    predicate() {
        const { toString, matches } = this;
        return {
            toString,
            call: matches,
        };
    }
    toString() {
        return this.description;
    }
    static failIfNot(description, predicate) {
        return new Condition(description, async (entity) => {
            if (!(await predicate(entity))) {
                throw new errors_1.ConditionNotMatchedError();
            }
        });
    }
    static failIfNotActual(description, query, // TODO: what about accepting simple fn here?
    predicate) {
        return new Condition(description, async (entity) => {
            const actual = await query.call(entity);
            if (!predicate(actual)) {
                throw new Error(`actual ${query}: ${actual}`);
            }
        });
    }
    /**
     * Negates or inverts condition
     */
    static not(condition, description) {
        const [isOrHave, ...name] = condition.toString().split(' ');
        const newDescription = `${isOrHave} ${isOrHave === 'is' ? 'not' : 'no'} ${name.join(' ')}`;
        // TODO: can we simplify this logic?
        return new Condition(description || newDescription, (entity) => condition.call(entity).then(() => {
            throw new errors_1.ConditionNotMatchedError();
        }, () => { }));
    }
    /**
     * Combines conditions by logical AND
     */
    static and(...conditions) {
        return new Condition(conditions.map(toString).join(' and '), async (entity) => {
            // eslint-disable-next-line no-restricted-syntax
            for (const condition of conditions) {
                await condition.call(entity);
            }
        });
    }
    /**
     * Combines conditions by logical OR
     */
    static or(...conditions) {
        return new Condition(conditions.map(toString).join(' or '), async (entity) => {
            const errors = [];
            // eslint-disable-next-line no-restricted-syntax
            for (const condition of conditions) {
                try {
                    await condition.call(entity);
                    return;
                }
                catch (error) {
                    errors.push(error);
                }
            }
            throw new Error(errors.map(toString).join('; '));
        });
    }
    /**
     * Transforms Conditions, i.e. Matchers that return (void | throws Error),
     * combined by AND
     * to async Predicate that returns (true | false)
     */
    static asPredicate(...conditions) {
        return (entity) => Condition.and(...conditions)
            .call(entity)
            .then(() => true, () => false);
    }
}
exports.Condition = Condition;
